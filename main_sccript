import pygame
import sys
import random
import math
import matplotlib.pyplot as plt
from io import BytesIO
import base64

# Pygame başlatma
pygame.init()

# Ekran boyutları
WIDTH, HEIGHT = 1024, 768
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("İstanbul 112 Ambulans İstasyonu Optimizasyonu")

# Renkler
WHITE = (255, 255, 255)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)
BLACK = (0, 0, 0)

# Fontlar
FONT_SMALL = pygame.font.Font(None, 24)
FONT_MEDIUM = pygame.font.Font(None, 32)
FONT_LARGE = pygame.font.Font(None, 48)

class Station:
    def __init__(self, x, y):
        self.x = x
        self.y = y
        self.staff = random.randint(3, 6)
        self.ambulances = random.randint(1, 4)
        self.daily_cases = random.randint(5, 50)
        self.color = RED
        self.radius = 5
        self.update_color()

    def draw(self, surface):
        pygame.draw.circle(surface, self.color, (int(self.x), int(self.y)), self.radius)

    def update_color(self):
        score = self.daily_cases * self.staff * self.ambulances
        if score > 500:
            self.color = GREEN
        elif score > 250:
            self.color = BLUE
        else:
            self.color = RED

    def get_info(self):
        return f"Personel: {self.staff}, Ambulans: {self.ambulances}, Günlük Vaka: {self.daily_cases}"

class Simulation:
    def __init__(self):
        self.stations = [Station(random.uniform(0, WIDTH), random.uniform(0, HEIGHT)) for _ in range(300)]
        self.step = 0
        self.max_steps = 20
        self.paused = True
        self.speed = 1
        self.stats_history = []
        self.selected_station = None
        self.update_stats()
        self.message = "Simülasyon başlatıldı. Başlamak için SPACE tuşuna basın."

    def update(self):
        if not self.paused and self.step < self.max_steps:
            threshold = self.step * 25
            old_count = len(self.stations)
            self.stations = [s for s in self.stations if s.daily_cases * s.staff * s.ambulances > threshold]
            for station in self.stations:
                station.update_color()
            self.step += 1
            self.update_stats()
            removed_count = old_count - len(self.stations)
            self.message = f"Adım {self.step}: {removed_count} istasyon kapatıldı. Kalan: {len(self.stations)}"

    def update_stats(self):
        total_staff = sum(s.staff for s in self.stations)
        total_ambulances = sum(s.ambulances for s in self.stations)
        total_cases = sum(s.daily_cases for s in self.stations)
        self.stats_history.append({
            'stations': len(self.stations),
            'staff': total_staff,
            'ambulances': total_ambulances,
            'cases': total_cases
        })

    def draw(self, surface):
        for station in self.stations:
            station.draw(surface)
        if self.selected_station:
            pygame.draw.circle(surface, WHITE, (int(self.selected_station.x), int(self.selected_station.y)), 10, 2)

    def select_station(self, pos):
        for station in self.stations:
            if math.hypot(station.x - pos[0], station.y - pos[1]) < 10:
                self.selected_station = station
                return
        self.selected_station = None

    def get_stats(self):
        if not self.stats_history:
            return "Henüz veri yok"
        latest = self.stats_history[-1]
        return f"İstasyonlar: {latest['stations']}, Personel: {latest['staff']}, Ambulanslar: {latest['ambulances']}, Vakalar: {latest['cases']}"

    def generate_report(self):
        if not self.stats_history:
            return "<p>Henüz rapor oluşturmak için yeterli veri yok.</p>"

        fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 12))
        
        data = list(zip(*[(s['stations'], s['staff'], s['ambulances'], s['cases']) for s in self.stats_history]))
        ax1.plot(range(len(data[0])), data[0], label='İstasyonlar')
        ax1.plot(range(len(data[1])), data[1], label='Personel')
        ax1.plot(range(len(data[2])), data[2], label='Ambulanslar')
        ax1.set_xlabel('Adım')
        ax1.set_ylabel('Sayı')
        ax1.legend()
        ax1.set_title('Optimizasyon İlerlemesi')
        
        ax2.boxplot(data)
        ax2.set_xticklabels(['İstasyonlar', 'Personel', 'Ambulanslar', 'Vakalar'])
        ax2.set_title('Metrik Dağılımları')
        
        plt.tight_layout()
        
        buf = BytesIO()
        plt.savefig(buf, format='png')
        buf.seek(0)
        img_str = base64.b64encode(buf.read()).decode()
        return f"<img src='data:image/png;base64,{img_str}'/>"

def main():
    simulation = Simulation()
    clock = pygame.time.Clock()
    running = True

    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.MOUSEBUTTONDOWN:
                if event.button == 1:  # Sol tık
                    simulation.select_station(event.pos)
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE:
                    simulation.paused = not simulation.paused
                    if simulation.paused:
                        simulation.message = "Simülasyon duraklatıldı. Devam etmek için SPACE tuşuna basın."
                    else:
                        simulation.message = "Simülasyon devam ediyor..."
                elif event.key == pygame.K_UP:
                    simulation.speed = min(simulation.speed + 1, 5)
                    simulation.message = f"Simülasyon hızı: {simulation.speed}x"
                elif event.key == pygame.K_DOWN:
                    simulation.speed = max(simulation.speed - 1, 1)
                    simulation.message = f"Simülasyon hızı: {simulation.speed}x"
                elif event.key == pygame.K_r:
                    generate_html_report(simulation)

        screen.fill(WHITE)

        simulation.draw(screen)

        # İstatistikleri göster
        stats_text = FONT_SMALL.render(simulation.get_stats(), True, BLACK)
        screen.blit(stats_text, (10, 10))

        # Adım ve hız bilgisini göster
        step_text = FONT_MEDIUM.render(f"Adım: {simulation.step}/{simulation.max_steps} | Hız: {simulation.speed}x", True, BLACK)
        screen.blit(step_text, (WIDTH - 250, 10))

        # Mesajı göster
        message_text = FONT_SMALL.render(simulation.message, True, BLACK)
        screen.blit(message_text, (10, HEIGHT - 60))

        # Seçili istasyon bilgisini göster
        if simulation.selected_station:
            info_text = FONT_SMALL.render(simulation.selected_station.get_info(), True, BLACK)
            screen.blit(info_text, (10, HEIGHT - 30))

        pygame.display.flip()

        if not simulation.paused:
            for _ in range(simulation.speed):
                simulation.update()

        clock.tick(2)  # Her saniye 2 kare, yani her adım 0.5 saniye sürer

    pygame.quit()
    sys.exit()

def generate_html_report(simulation):
    html_content = f"""
    <html>
    <head>
        <title>İstanbul 112 Ambulans İstasyonu Optimizasyonu Raporu</title>
    </head>
    <body>
        <h1>Simülasyon Raporu</h1>
        <p>Toplam Adım Sayısı: {simulation.step}</p>
        <p>Son Durum: {simulation.get_stats()}</p>
        <h2>İstatistikler</h2>
        {simulation.generate_report()}
    </body>
    </html>
    """
    with open("simulation_report.html", "w", encoding='utf-8') as f:
        f.write(html_content)
    print("Rapor oluşturuldu: simulation_report.html")

if __name__ == "__main__":
    main()
