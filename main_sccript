import pandas as pd
import geopandas as gpd
import folium
from folium import plugins
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from tqdm import tqdm
import io
import base64

# İstanbul ilçe sınırlarını içeren GeoJSON dosyasını yükle
istanbul = gpd.read_file('istanbul_districts.geojson')

# Rastgele ambulans istasyonları oluştur
num_stations = 300
stations = pd.DataFrame({
    'station_id': range(num_stations),
    'lat': np.random.uniform(40.8, 41.2, num_stations),
    'lon': np.random.uniform(28.5, 29.5, num_stations),
    'staff': np.random.randint(3, 6, num_stations),
    'ambulances': np.random.randint(1, 4, num_stations),
    'daily_cases': np.random.randint(5, 50, num_stations)
})

# İstasyonları ilçelere atama
stations['district'] = gpd.GeoDataFrame(
    stations, geometry=gpd.points_from_xy(stations.lon, stations.lat)
).sjoin(istanbul)['name']

# Optimizasyon fonksiyonu
def optimize_stations(stations, threshold):
    score = stations['daily_cases'] * stations['staff'] * stations['ambulances']
    return stations[score > threshold].copy()

# Harita oluşturma fonksiyonu
def create_map(stations, step):
    m = folium.Map(location=[41.0, 29.0], zoom_start=10)
    
    # İlçe sınırlarını ekle
    folium.GeoJson(istanbul).add_to(m)
    
    # İstasyonları ekle
    for _, station in stations.iterrows():
        folium.CircleMarker(
            [station['lat'], station['lon']],
            radius=5,
            popup=f"ID: {station['station_id']}<br>Staff: {station['staff']}<br>Ambulances: {station['ambulances']}<br>Daily Cases: {station['daily_cases']}",
            color='red',
            fill=True,
            fillColor='red'
        ).add_to(m)
    
    # Başlık ekle
    title_html = f'<h3 align="center" style="font-size:16px"><b>Istanbul 112 Ambulance Stations - Step {step}</b></h3>'
    m.get_root().html.add_child(folium.Element(title_html))
    
    return m

# İstatistik grafiği oluşturma fonksiyonu
def create_stats_plot(stations_history):
    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 12))
    
    steps = range(len(stations_history))
    stations_count = [len(s) for s in stations_history]
    total_staff = [s['staff'].sum() for s in stations_history]
    total_ambulances = [s['ambulances'].sum() for s in stations_history]
    total_cases = [s['daily_cases'].sum() for s in stations_history]
    
    ax1.plot(steps, stations_count, label='Stations')
    ax1.plot(steps, total_staff, label='Total Staff')
    ax1.plot(steps, total_ambulances, label='Total Ambulances')
    ax1.set_xlabel('Optimization Step')
    ax1.set_ylabel('Count')
    ax1.legend()
    ax1.set_title('Optimization Progress')
    
    sns.boxplot(data=pd.DataFrame(stations_history).melt(var_name='Metric', value_name='Value'), 
                x='Metric', y='Value', ax=ax2)
    ax2.set_title('Distribution of Metrics Across Optimization Steps')
    
    plt.tight_layout()
    return fig

# Ana simülasyon döngüsü
stations_history = []
maps = []
num_steps = 20

for step in tqdm(range(num_steps)):
    threshold = step * 100
    optimized_stations = optimize_stations(stations, threshold)
    stations_history.append(optimized_stations)
    maps.append(create_map(optimized_stations, step))

# İstatistik grafiğini oluştur
stats_plot = create_stats_plot(stations_history)

# Grafiği base64'e dönüştür
buf = io.BytesIO()
stats_plot.savefig(buf, format='png')
buf.seek(0)
string = base64.b64encode(buf.read()).decode('utf-8')
stats_html = f'<img src="data:image/png;base64,{string}">'

# HTML raporu oluştur
html_content = """
<!DOCTYPE html>
<html>
<head>
    <title>Istanbul 112 Ambulance Station Optimization</title>
    <style>
        body { font-family: Arial, sans-serif; }
        .map-container { display: flex; flex-wrap: wrap; justify-content: center; }
        .map { margin: 10px; }
    </style>
</head>
<body>
    <h1>Istanbul 112 Ambulance Station Optimization Simulation</h1>
    <div class="map-container">
        {maps}
    </div>
    <h2>Optimization Statistics</h2>
    {stats}
</body>
</html>
"""

map_html = ''.join([m.get_root().render() for m in maps])
html_content = html_content.format(maps=map_html, stats=stats_html)

# HTML dosyasını kaydet
with open('istanbul_112_optimization_report.html', 'w', encoding='utf-8') as f:
    f.write(html_content)

print("Simülasyon tamamlandı. Rapor 'istanbul_112_optimization_report.html' dosyasına kaydedildi.")
